;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){


module.exports = Ep.RestAdapter.extend({
    url: 'http://localhost:3000',
    namespace: '',   //api

/*
    serializer: DS.RESTSerializer.extend({
        primaryKey: function(type) {
            return '_id';
        }
        	If anything pops out as a float, uncomment this to force string
        ,serializeId: function(id) {
            return id.toString();
        }
    })
*/
});


},{}],2:[function(require,module,exports){
// require other, dependencies here, ie:
// require('./vendor/moment');



//require('../vendor/jquery');
//require('../vendor/bootstrap');
//require('../vendor/handlebars');
//require('../vendor/ember');
//require('../vendor/ember-data'); // delete if you don't want ember-data

//require('../vendor/ember-addons.bs_for_ember/dist/js/bs-alert.min');
//require('../vendor/ember-addons.bs_for_ember/dist/js/bs-core.min');


var App = Ember.Application.create();
//var App = Ember.Application.createWithMixins(Bootstrap.Register);
//App.RESTAdapter = require('./adapter');
//App.Store = require('./store'); // delete if you don't want ember-data
App.Adapter = require('./adapter');

module.exports = App;


},{"./adapter":1}],3:[function(require,module,exports){
var App = require('./app');

App.Router.map(function() {

  // generated by ember-generate --scaffold
  this.resource('time_sheets');
  this.resource('time_sheet', {path: '/time_sheets/:time_sheet_id'});
  this.route('edit_time_sheet', {path: '/time_sheets/:time_sheet_id/edit'});
  this.route('new_time_sheet', {path: '/time_sheets/new'});
  // end generated routes

  this.resource('about');
  this.resource('contact');
  this.resource('posts', function() {
  	this.resource('post', { path: ':post_id' });
  });
});


},{"./app":2}],4:[function(require,module,exports){
var EditTimeSheetController = Ember.ObjectController.extend({

  save: function() {
    //this.get('store').commit();
    this.redirectToModel();
  },

  redirectToModel: function() {
    var router = this.get('target');
    var model = this.get('model');
    router.transitionTo('time_sheet', model);
  }

});

module.exports = EditTimeSheetController;


},{}],5:[function(require,module,exports){
var EditTimeSheetController = require('./edit_time_sheet_controller');

// inherit from edit controller
var NewTimeSheetController = EditTimeSheetController.extend();

module.exports = NewTimeSheetController;


},{"./edit_time_sheet_controller":4}],6:[function(require,module,exports){
var PostController = Ember.ObjectController.extend({
	isEditing: false,

	actions: {
		edit: function() {
			this.set('isEditing', true);
		},

		doneEditing: function() {
			this.set('isEditing', false);
		}
	}
});

module.exports = PostController;


},{}],7:[function(require,module,exports){
var TimeSheetController = Ember.ObjectController.extend({

  destroy: function() {
    if (!confirm('Are you sure?')) return;
    this.get('model').deleteRecord();
    //this.get('store').commit();
    this.get('target.router').transitionTo('time_sheets');
  }

});

module.exports = TimeSheetController;


},{}],8:[function(require,module,exports){
Ember.Handlebars.helper('format-date', function(value, option) {
	return moment(value).fromNow();
});


},{}],9:[function(require,module,exports){
Ember.Handlebars.helper('format-markdown', function(value, option) {
	var showdownConverter = new Showdown.converter({});
	return new Handlebars.SafeString(showdownConverter.makeHtml(value));
});


},{}],10:[function(require,module,exports){
// This file is auto-generated by `ember build`.
// You should not modify it.

var App = window.App = require('./config/app');
require('./templates');
require('./helpers/format_date');
require('./helpers/format_markdown');


App.EditTimeSheetController = require('./controllers/edit_time_sheet_controller');
App.NewTimeSheetController = require('./controllers/new_time_sheet_controller');
App.PostController = require('./controllers/post_controller');
App.TimeSheetController = require('./controllers/time_sheet_controller');
App.Person = require('./models/person');
App.Post = require('./models/post');
App.TimeSheet = require('./models/time_sheet');
App.AboutRoute = require('./routes/about_route');
App.ContactRoute = require('./routes/contact_route');
App.IndexRoute = require('./routes/index_route');
App.NewTimeSheetRoute = require('./routes/new_time_sheet_route');
App.PostRoute = require('./routes/post_route');
App.PostsRoute = require('./routes/posts_route');
App.TimeSheetsRoute = require('./routes/time_sheets_route');
App.PostView = require('./views/post_view');

require('./config/routes');

module.exports = App;


},{"./config/app":2,"./config/routes":3,"./controllers/edit_time_sheet_controller":4,"./controllers/new_time_sheet_controller":5,"./controllers/post_controller":6,"./controllers/time_sheet_controller":7,"./helpers/format_date":8,"./helpers/format_markdown":9,"./models/person":11,"./models/post":12,"./models/time_sheet":13,"./routes/about_route":14,"./routes/contact_route":15,"./routes/index_route":16,"./routes/new_time_sheet_route":17,"./routes/post_route":18,"./routes/posts_route":19,"./routes/time_sheets_route":20,"./templates":21,"./views/post_view":22}],11:[function(require,module,exports){
App.Post       = Ep.Model.extend();

/* Ember-Data Model
var Person = DS.Model.extend({
	firstName: DS.attr('string'),
	lastName: DS.attr('string'),
	birthdate: DS.attr('date'),
	posts: DS.hasMany('post'),

	fullName: function() {
		return this.get('firstName') + ' ' + this.get('lastName');
	}.property('firstName', 'lastName')
});
*/

var Person = Ep.Model.extend({
	firstName: Ep.attr('string'),
	lastName: Ep.attr('string'),
	birthdate: Ep.attr('date'),
	posts: Ep.hasMany( 'post' )

});

module.exports = Person;


},{}],12:[function(require,module,exports){
App.Person       = Ep.Model.extend();


/* Ember-Data Model
var Post = DS.Model.extend({
	title: DS.attr('string'),
	author: DS.belongsTo('person'),
	date: DS.attr('date', { defaultValue: function() { return new Date(); } } ),
	excerpt: DS.attr('string'),
	body: DS.attr('string')
});
*/

var Post = Ep.Model.extend({
	title: Ep.attr('string'),
	author: Ep.belongsTo( 'person' ),
	date: Ep.attr('date'),
	excerpt: Ep.attr('string'),
	body: Ep.attr('string')

});

module.exports = Post;


},{}],13:[function(require,module,exports){

/* Ember-Data Model
var TimeSheet = DS.Model.extend({

  description: DS.attr('string'),

  minutes: DS.attr('number')

});
*/

var TimeSheet = Ep.Model.extend({
	description: Ep.attr('string'),
	minutes: Ep.attr('number')

});


module.exports = TimeSheet;


},{}],14:[function(require,module,exports){
var AboutRoute = Ember.Route.extend({

});

module.exports = AboutRoute;


},{}],15:[function(require,module,exports){
var ContactRoute = Ember.Route.extend({
	model: function() {
		console.log("Loading Store...");

		var myuser = new App.Person({
			firstName: 'd2h',
			lastName: 'd2h',
			birthdate: new Date('01-20-1984')
			});
		var myuser2 = this.session.create(App.Person, {
			firstName: 'd2h',
			lastName: 'd2h',
			birthdate: new Date('01-20-1984')
			});
		this.session.flush();
		console.log("Created user: " + myuser2.id);

/*
		for( var x = 0; x < posts2.length; ++x ) {
			var mypost = posts2[x];
			console.log( "Date: " + mypost.date);
			var post = this.store.createRecord('post', {
				title: mypost.title,
				date: new Date(mypost.date),
				excerpt: mypost.excerpt,
				body: mypost.body
			});

			this.store.find('person', myuser.id).then(function(user) {
			  post.set('author', user);
			});
		}
		*/

	}
});

module.exports = ContactRoute;


},{}],16:[function(require,module,exports){
var IndexRoute = Ember.Route.extend({
  model: function() {
    return ['red', 'yellow', 'blue'];
  }
});

module.exports = IndexRoute;


},{}],17:[function(require,module,exports){
var time_sheet = require('../models/time_sheet');

var NewTimeSheetRoute = Ember.Route.extend({

  renderTemplate: function() {
    this.render('edit_time_sheet', {controller: 'new_time_sheet'});
  },

  model: function() {
    return time_sheet.createRecord();
  },

  deactivate: function() {
    var model = this.get('controller.model');
    if (!model.get('isSaving')) {
      model.deleteRecord();
    }
  }

});

module.exports = NewTimeSheetRoute;


},{"../models/time_sheet":13}],18:[function(require,module,exports){
var PostRoute = Ember.Route.extend({
	/* XHR
	model: function(params) {
		return $.getJSON('/data/posts.json').then(function(data) {
			//console.log("data is: " + data);
			return data.posts.findBy('id', params.post_id);
		});
	}
	*/
	/* Simple model 
	model: function(params) {
		return posts2.findBy('id', params.post_id);
	}
	*/
	/* Store model */
	model: function(params) {
		console.log("Finding Post["+params.post_id+"] ...");
		//return this.store.find('post', params.post_id);
	}
});

module.exports = PostRoute;


},{}],19:[function(require,module,exports){
var PostsRoute = Ember.Route.extend({
	/* XHR
	model: function() {
		console.log("here");
		return $.getJSON('/data/posts.json').then(function(data) {
			//console.log("data is: " + data);
			return data.posts;
		});
	}
	*/
	/* Simple model 
	model: function() {
		return posts2;
	}
	*/
	/* Store model */
	model: function() {
		console.log("Finding all posts...");
		//return this.store.all('post'); // 'all' will use cache
	}
	
});

module.exports = PostsRoute;


},{}],20:[function(require,module,exports){
var TimeSheet = require('../models/time_sheet');

var TimeSheetRoute = Ember.Route.extend({

  model: function() {
    return TimeSheet.find();
  }

});

module.exports = TimeSheetRoute;


},{"../models/time_sheet":13}],21:[function(require,module,exports){

Ember.TEMPLATES['about'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  


  data.buffer.push("      <h2>About this website</h2>\n\n\n\n      ");
  
});

Ember.TEMPLATES['application'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, stack2, hashTypes, hashContexts, options, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  
  data.buffer.push("Home");
  }

function program3(depth0,data) {
  
  
  data.buffer.push("About");
  }

function program5(depth0,data) {
  
  
  data.buffer.push("Posts");
  }

function program7(depth0,data) {
  
  
  data.buffer.push("Contact");
  }

function program9(depth0,data) {
  
  
  data.buffer.push("Timesheets");
  }

  data.buffer.push("    <div class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n      <div class=\"container\">\n        <div class=\"navbar-header\">\n          <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n          </button>\n          <a class=\"navbar-brand\" href=\"#\">Project name</a>\n        </div>\n        <div class=\"collapse navbar-collapse\">\n          <ul class=\"nav navbar-nav\">\n            <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers['link-to'] || depth0['link-to']),stack1 ? stack1.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n            <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers['link-to'] || depth0['link-to']),stack1 ? stack1.call(depth0, "about", options) : helperMissing.call(depth0, "link-to", "about", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n            <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers['link-to'] || depth0['link-to']),stack1 ? stack1.call(depth0, "posts", options) : helperMissing.call(depth0, "link-to", "posts", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n            <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers['link-to'] || depth0['link-to']),stack1 ? stack1.call(depth0, "contact", options) : helperMissing.call(depth0, "link-to", "contact", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n            <li>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers['link-to'] || depth0['link-to']),stack1 ? stack1.call(depth0, "time_sheets", options) : helperMissing.call(depth0, "link-to", "time_sheets", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</li>\n          </ul>\n        </div><!--/.nav-collapse -->\n      </div>\n    </div>\n\n\n");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "outlet", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n\n");
  return buffer;
  
});

Ember.TEMPLATES['contact'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  


  data.buffer.push("      <div class='muted'>Loaded Store...</div>");
  
});

Ember.TEMPLATES['edit_time_sheet'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', hashContexts, hashTypes, escapeExpression=this.escapeExpression;


  data.buffer.push("<h2>Time sheet</h2>\n\n<form ");
  hashContexts = {'on': depth0};
  hashTypes = {'on': "STRING"};
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "save", {hash:{
    'on': ("submit")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(">\n  \n  <p>\n    <label for=\"description\">Description</label><br>\n    ");
  hashContexts = {'valueBinding': depth0,'id': depth0};
  hashTypes = {'valueBinding': "STRING",'id': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.TextField", {hash:{
    'valueBinding': ("description"),
    'id': ("description")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n  </p>\n  \n  <p>\n    <label for=\"minutes\">Minutes</label><br>\n    ");
  hashContexts = {'valueBinding': depth0,'id': depth0};
  hashTypes = {'valueBinding': "STRING",'id': "STRING"};
  data.buffer.push(escapeExpression(helpers.view.call(depth0, "Ember.TextField", {hash:{
    'valueBinding': ("minutes"),
    'id': ("minutes")
  },contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n  </p>\n  \n  <p>\n    <button type=\"submit\">Save</button>\n  </p>\n\n</form>\n\n");
  return buffer;
  
});

Ember.TEMPLATES['index'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, stack2, hashContexts, hashTypes, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {
  
  var buffer = '', hashTypes, hashContexts;
  data.buffer.push("\n      <li>");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "item", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</li>\n    ");
  return buffer;
  }

  data.buffer.push("\n    <div class=\"container\">\n\n      <div class=\"main-container\">\n        <h1>Bootstrap starter template</h1>\n        <p class=\"lead\">Use this document as a way to quickly start any new project.<br> All you get is this text and a mostly barebones HTML document. oh yeahhh</p>\n      </div>\n\n    </div><!-- /.container -->\n\n    <h2>Welcome to Ember.js</h2>\n\n    ");
  hashContexts = {'message': depth0,'type': depth0,'dismissAfter': depth0,'fade': depth0};
  hashTypes = {'message': "STRING",'type': "STRING",'dismissAfter': "INTEGER",'fade': "BOOLEAN"};
  options = {hash:{
    'message': ("A self destroyable hello world message!A"),
    'type': ("info"),
    'dismissAfter': (2),
    'fade': (true)
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['bs-alert'] || depth0['bs-alert']),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "bs-alert", options))));
  data.buffer.push("\n\n    <ul>\n    ");
  hashTypes = {};
  hashContexts = {};
  stack2 = helpers.each.call(depth0, "item", "in", "model", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n    </ul>");
  return buffer;
  
});

Ember.TEMPLATES['post'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashTypes, hashContexts, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = '', stack1, hashTypes, hashContexts, options;
  data.buffer.push("\n        ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers.partial || depth0.partial),stack1 ? stack1.call(depth0, "post/edit", options) : helperMissing.call(depth0, "partial", "post/edit", options))));
  data.buffer.push("\n        <button ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "doneEditing", {hash:{},contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(">Done</button>\n      ");
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = '', hashTypes, hashContexts;
  data.buffer.push("\n        <button ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "edit", {hash:{},contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(">Edit</button>\n      ");
  return buffer;
  }

  data.buffer.push("      ");
  hashTypes = {};
  hashContexts = {};
  stack1 = helpers['if'].call(depth0, "isEditing", {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n\n\n      <h1>");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "title", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</h1>\n      <h2>by ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "author.fullName", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(" <small class='muted'>(");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['format-date'] || depth0['format-date']),stack1 ? stack1.call(depth0, "date", options) : helperMissing.call(depth0, "format-date", "date", options))));
  data.buffer.push(")</small></h2>\n\n      <hr>\n\n      <div class='intro'>\n          ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['format-markdown'] || depth0['format-markdown']),stack1 ? stack1.call(depth0, "excerpt", options) : helperMissing.call(depth0, "format-markdown", "excerpt", options))));
  data.buffer.push("\n      </div>\n\n      <div class='below-the-fold'>\n          ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers['format-markdown'] || depth0['format-markdown']),stack1 ? stack1.call(depth0, "body", options) : helperMissing.call(depth0, "format-markdown", "body", options))));
  data.buffer.push("\n      </div>");
  return buffer;
  
});

Ember.TEMPLATES['posts'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashTypes, hashContexts, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var buffer = '', stack1, stack2, hashTypes, hashContexts, options;
  data.buffer.push("\n              <tr><td>\n                  ");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0,depth0],types:["STRING","ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers['link-to'] || depth0['link-to']),stack1 ? stack1.call(depth0, "post", "", options) : helperMissing.call(depth0, "link-to", "post", "", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n              </td></tr>\n              ");
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = '', hashTypes, hashContexts;
  data.buffer.push("\n                    ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "title", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(" <small class='muted'>by ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "author.fullName", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</small>\n                  ");
  return buffer;
  }

  data.buffer.push("      <div class=\"container-fluid\">\n        <div class=\"row-fluid\">\n          <div class=\"col-md-3\">\n            <table class='table table-hover'>\n              <thead>\n                <tr><th>Recent Posts</th></tr>\n              </thead>\n              ");
  hashTypes = {};
  hashContexts = {};
  stack1 = helpers.each.call(depth0, "model", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n            </table>\n          </div>\n          <div class=\"col-md-9\">\n              ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "outlet", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n          </div>\n        </div>\n      </div>\n\n\n      ");
  return buffer;
  
});

Ember.TEMPLATES['time_sheet'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, stack2, hashTypes, hashContexts, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  
  data.buffer.push("←All Time sheets");
  }

function program3(depth0,data) {
  
  
  data.buffer.push("Edit");
  }

  data.buffer.push("<h2>Time sheet</h2>\n\n<p>\n  <b>Description:</b> ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "description", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n</p>\n\n<p>\n  <b>Minutes:</b> ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "minutes", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("\n</p>\n\n");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "time_sheets", options) : helperMissing.call(depth0, "linkTo", "time_sheets", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0,depth0],types:["STRING","ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "edit_time_sheet", "model", options) : helperMissing.call(depth0, "linkTo", "edit_time_sheet", "model", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n<a href=\"#\" ");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "destroy", {hash:{},contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push(">Destroy</a>\n");
  return buffer;
  
});

Ember.TEMPLATES['time_sheets'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, stack2, hashTypes, hashContexts, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  
  data.buffer.push("New Time sheet");
  }

function program3(depth0,data) {
  
  var buffer = '', stack1, stack2, hashTypes, hashContexts, options;
  data.buffer.push("\n    <tr>\n      <td>");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "time_sheet.description", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</td>\n      <td>");
  hashTypes = {};
  hashContexts = {};
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "time_sheet.minutes", {hash:{},contexts:[depth0],types:["ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));
  data.buffer.push("</td>\n      <td>");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0,depth0],types:["STRING","ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "time_sheet", "time_sheet", options) : helperMissing.call(depth0, "linkTo", "time_sheet", "time_sheet", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("</td>\n    </tr>\n    ");
  return buffer;
  }
function program4(depth0,data) {
  
  
  data.buffer.push("view");
  }

  data.buffer.push("<h2>Time sheets</h2>\n\n");
  hashTypes = {};
  hashContexts = {};
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["STRING"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  stack2 = ((stack1 = helpers.linkTo || depth0.linkTo),stack1 ? stack1.call(depth0, "new_time_sheet", options) : helperMissing.call(depth0, "linkTo", "new_time_sheet", options));
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n\n<table>\n  <thead>\n    <th>description</th>\n    <th>minutes</th>\n  </thead>\n  <tbody>\n    ");
  hashTypes = {};
  hashContexts = {};
  stack2 = helpers.each.call(depth0, "time_sheet", "in", "controller", {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0,depth0,depth0],types:["ID","ID","ID"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});
  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }
  data.buffer.push("\n  </tbody>\n</table>\n\n\n");
  return buffer;
  
});

Ember.TEMPLATES['posts/index'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  


  data.buffer.push("    <p class=\"text-warning\">Please select a post.</p>");
  
});

Ember.TEMPLATES['post/_edit'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  data.buffer.push("      <p>");
  hashContexts = {'type': depth0,'value': depth0};
  hashTypes = {'type': "STRING",'value': "ID"};
  options = {hash:{
    'type': ("text"),
    'value': ("title")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers.input || depth0.input),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "input", options))));
  data.buffer.push("</p>\n      <p>");
  hashContexts = {'type': depth0,'value': depth0};
  hashTypes = {'type': "STRING",'value': "ID"};
  options = {hash:{
    'type': ("text"),
    'value': ("excerpt")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers.input || depth0.input),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "input", options))));
  data.buffer.push("</p>\n      <p>");
  hashContexts = {'value': depth0};
  hashTypes = {'value': "ID"};
  options = {hash:{
    'value': ("body")
  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};
  data.buffer.push(escapeExpression(((stack1 = helpers.textarea || depth0.textarea),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, "textarea", options))));
  data.buffer.push("</p>");
  return buffer;
  
});



},{}],22:[function(require,module,exports){
var PostView = Ember.View.extend({

});

module.exports = PostView;


},{}]},{},[10])
;